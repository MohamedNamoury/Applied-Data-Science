tr <- read.transactions("Book1.csv")
library(stringi)
library(reshape2)
library(lsa)
library(matlib)
course_ratings=read.csv("courserating.csv")
transposed_course_ratings=read.csv("tcourserating.csv")
#removing user ids
course_ratings = as.matrix(course_ratings[,-1])
transposed_course_ratings= as.matrix(transposed_course_ratings[,-1])
transposed_course_ratings[is.na(transposed_course_ratings)] = 0
cosine(transposed_course_ratings)
#install.packages("recommenderlab", dependencies=TRUE)
library(recommenderlab)
#Convert ratings matrix to real rating matrx which makes it dense
course_ratings = as(course_ratings, "realRatingMatrix")
#Create Recommender Model. The parameters are UBCF and Cosine similarity. We take 10 nearest neighbours
rec_mod_1 = Recommender(course_ratings, method = "UBCF", param=list(method="Cosine"))
#Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred_1 = predict(rec_mod_1, course_ratings[4], n=1)
#Convert the recommendations to a list
Top_5_List_1 = as(Top_5_pred, "list")
#Convert the recommendations to a list
Top_5_List_1 = as(Top_5_pred_1, "list")
Top_5_List_1
#Convert ratings matrix to real rating matrx which makes it dense
course_ratings = as(course_ratings, "realRatingMatrix")
#Create Recommender Model. The parameters are IBCF and Cosine similarity. We take 10 nearest neighbours
rec_mod = Recommender(course_ratings, method = "IBCF", param=list(method="Cosine"))
#Obtain top 5 recommendations for 1st user entry in dataset
Top_5_pred = predict(rec_mod, course_ratings[4], n=1)
#Convert the recommendations to a list
Top_5_List = as(Top_5_pred, "list")
Top_5_List
